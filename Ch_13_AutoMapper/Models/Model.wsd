@startuml --
title Book Api

package Entities{
    class Book{
        + Id:int
        + CategoryId:int
        + Title:string
        + Price:double
        + Category:Category
    }

    class Category {
        + Id:int
        + CategoryName:string
        + Books:ICollection<Book>
    }

    ' Category "1" --> "0..*" Book : "Books"
    Book "n" o-down-> "1" Category : "one to many"
}
package Entities.DTOs{
    class BookDtoForInsertion{}
    class BookDtoForUpdate{}
    class BookDto{
        + Id:int
        + Category:Category
    }
    abstract BookDtoBase{
        + title:string
        + price:Decimal
        + categoryId:int
    }
}
package Entities.Exceptions{
    abstract NotFoundException{
        + NotFoundException(message:string)
    }
    class BookNotFoundException{
        + BookNotFoundException(id:int)
    }
}



package Repositories {

    class RepositoryContext{
        + Books: DbSet<Book>
        + Categories: DbSet<Category>
        --
        + RepositoryContext(options:DbContextOptions)
        + OnModelCreating(modelBuilder:ModelBuilder)
    }
    class BookRepository {
        + GetAll():List<Book>
        + Get(id): Book?
       
    }
    class CategoryRepository {
       
       
    }

    abstract RepositoryBase
    {
        # context:RepositoryContext
        --
        + GetAll():List<T>
        + Get(id:int): T?
        + Add(item:T):void
        + Remove(item:T)
        + Update(item T)
    }


}
package Services{
    class BookService{
        - bookList:List<Book>
        --
        + Count : int
        --
        + GetBooks():List<Book>
        + GetBookById(id:int): Book
        + AddBook(book:BookDtoForInsertion):void
        + UpdateBook(id:int, book:BookDtoForUpdate):Book
        + DeleteBook(id:int):void
    }
    class BookServiceV2{
        - context:RepositoryContext
        --
        + Count : int
        --
        + GetBooks():List<Book>
        + GetBookById(id:int): Book
        + AddBook(book:BookDtoForInsertion):void
        + UpdateBook(id:int, book:BookDtoForUpdate):Book
        + DeleteBook(id:int):void
    }
    class BookServiceV3{
        - context:BookRepository
        --
        + Count : int
        --
        + GetBooks():List<Book>
        + GetBookById(id:int): Book
        + AddBook(book:BookDtoForInsertion):Book
        + UpdateBook(id:int, book:BookDtoForUpdate):Book
        + DeleteBook(id:int):void
    }


}


package Abstracts{
    interface IBookService{
        + Count : interface
        --
        + GetBooks():List<Book>
        + GetBookById(id:int): Book
        + AddBook(book:BookDtoForInsertion):Book
        + UpdateBook(id:int, book:BookDtoForUpdate):Book
        + DeleteBook(id:int):void
    }
}

package Cofiguration{
    class MappingProfile{

    }

    class ConfigurationExtensions{
        {static} + ValidateIdRange(id:int):void
        {static} + UseCustomExceptionHandler(app:IApplicationBuilder):void
        {static} + AddCustomCors(services:IServiceCollection):IServiceCollection
        {static} + AddCustomSwagger(services:IServiceCollection):IServiceCollection
    }
}


MappingProfile -right-|> Profile:"<<implements>>"

BookService .up.|> IBookService : "<<implements>>"
BookServiceV2 .up.|> IBookService : "<<implements>>"
BookServiceV3 .up.|> IBookService : "<<implements>>"


BookRepository -l-> RepositoryBase : "<<extends>>"
CategoryRepository -r-> RepositoryBase : "<<extends>>"
RepositoryBase o-d- RepositoryContext : "has-a"
RepositoryContext -right-|> DbContext : "<<extends>>"

BookNotFoundException -right-|> NotFoundException:"<<extends>>"


BookDto -up-|> BookDtoBase : "<<extends>>"
BookDtoForUpdate -left-|> BookDtoBase : "<<extends>>"
BookDtoForInsertion -right-|> BookDtoBase : "<<extends>>"



hide empty members

@enduml